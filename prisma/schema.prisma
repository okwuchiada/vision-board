// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  isVerified    Boolean        @default(false)
  first_name    String
  last_name     String
  username      String?        @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  boards        Board[]
  boardGoals    BoardGoal[]
  notifications Notification[]
}

model Board {
  id            String         @id @default(cuid())
  title         String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  boardGoal    BoardGoal[]
  timeline      String
  slug          String
  notifications Notification[]
}

model BoardGoal {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  boardId      String
  color        String
  goal         String
  category     Category
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  board        Board          @relation(fields: [boardId], references: [id])
  Notification Notification[]
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  boardId   String?
  board     Board?           @relation(fields: [boardId], references: [id])
  goalId    String?
  goal      BoardGoal?      @relation(fields: [goalId], references: [id])
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum Category {
  CAREER
  FINANCE
  HEALTH
  RELATIONSHIPS
  PERSONAL_GROWTH
  OTHER
}

enum NotificationType {
  TIMELINE_APPROACHING // When timeline is getting close
  TIMELINE_DUE // When timeline is due today
  TIMELINE_OVERDUE // When timeline has passed
  GOAL_COMPLETED // When a goal is marked as completed
  GOAL_ADDED // When a new goal is added to board
  BOARD_CREATED // When a new board is created
}
